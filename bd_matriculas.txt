use master

create database matriculas_bd
go

use matriculas_bd
go

create table tb_rol
(
    id_rol int IDENTITY(1,1) primary key,
    nom_rol varchar(50) not null
)
go

create table tb_usuario
(
    id_usuario int IDENTITY(1,1) primary key,
	contrasena varchar(30) not null,
	id_rol int, 
	foreign key (id_rol) references tb_rol(id_rol) 
)
go

create table tb_docentes
(
    id_docente int IDENTITY(100,1) primary key,
    nom_docente varchar(50) not null,
    nom_especialidad varchar(50) not null,
	activo bit not null,
)
go

create table tb_carrera
(
    id_carrera int IDENTITY(1,1) primary key,
    nom_carrera varchar(50) not null
)
go

create table tb_alumno
(
    id_usuario int primary key,
    nom_alumno varchar(50) not null,
	id_carrera int,
	foreign key (id_usuario) references tb_usuario(id_usuario),
	foreign key (id_carrera) references tb_carrera(id_carrera)
)
go

create table tb_curso
(
    id_curso int IDENTITY(1,1) primary key,
    nom_curso varchar(50) not null,
	creditos_curso smallint,
	id_carrera int,
	foreign key (id_carrera) references tb_carrera(id_carrera)
)
go

create table tb_aula
(
    cod_aula char(4) primary key CHECK (cod_aula LIKE '[A-Z][0-9][0-9][0-9]'),
    capacidad_aula smallint,
    disponibilidad bit
)
go

create table tb_seccion
(
    cod_seccion char(4) primary key CHECK (cod_seccion LIKE '[A-Z][0-9][A-Z][A-Z]'),
    cupos_disponible smallint,
    cupos_maximos smallint,
    horario_seccion char(5),
    id_docente int,
    cod_aula char(4),
	id_curso int,
    foreign key (id_docente) references tb_docentes(id_docente),
    foreign key (cod_aula) references tb_aula(cod_aula),
	foreign key (id_curso) references tb_curso(id_curso)
)
go

create table tb_periodo
(
    id_periodo char(6) primary key CHECK (id_periodo LIKE '[2][0][2][0-9][-][1-2]'),
	fcha_inicio DateTime not null,
	fcha_fin DateTime not null,
)
go

create table tb_matricula
(
    id_matricula int IDENTITY(1000,1) primary key,
	id_usuario int,
	id_periodo char(6),
	foreign key (id_usuario) references tb_usuario(id_usuario),
	foreign key (id_periodo) references tb_periodo(id_periodo)
)
go

create table tb_detalle_matricula
(
    id_matricula int,
	cod_seccion char(4),
	id_curso int,
	foreign key (id_matricula) references tb_matricula(id_matricula),
	foreign key (id_curso) references tb_curso(id_curso),
	foreign key (cod_seccion) references tb_seccion(cod_seccion)
)

--/PROCEDURES MANTENIMIENTO DOCENTES/

go
create or alter procedure usp_listarDocentes
as
    select * from tb_docentes
go

create or alter procedure usp_registrarDocentes(@nomdoce varchar(50), @nomespe varchar(50), @activo bit)
as
    insert into tb_docentes values (@nomdoce, @nomespe, @activo)
go

create or alter procedure usp_actualizarDocentes
    @id_docente int,
    @nomdoce varchar(50),
    @nomespe varchar(50),
    @activo bit
as
begin
    update tb_docentes
    set nom_docente = @nomdoce,
        nom_especialidad = @nomespe,
        activo = @activo
    where id_docente = @id_docente;
end
go

CREATE OR ALTER PROCEDURE usp_buscarDocente
    @id_docente INT
AS
BEGIN
    SELECT 
        id_docente,
        nom_docente,
        nom_especialidad,
        activo
    FROM tb_docentes
    WHERE id_docente = @id_docente;
END
GO

CREATE OR ALTER PROCEDURE usp_listarCursos
AS
BEGIN
    SELECT 
        c.id_curso,
        c.nom_curso,
        c.creditos_curso,
		c.id_carrera,
        ca.nom_carrera
    FROM 
        tb_curso c
    INNER JOIN 
        tb_carrera ca ON c.id_carrera = ca.id_carrera
END
GO

CREATE OR ALTER PROCEDURE usp_listarCursosO
AS
BEGIN
	select * from tb_curso
END
GO

CREATE OR ALTER PROCEDURE usp_registrarCurso
    @nom_curso VARCHAR(50),
    @creditos_curso SMALLINT,
    @id_carrera INT
AS
BEGIN
    BEGIN TRY
        INSERT INTO tb_curso (nom_curso, creditos_curso, id_carrera)
        VALUES (@nom_curso, @creditos_curso, @id_carrera);

        PRINT 'Curso registrado correctamente.';
    END TRY
    BEGIN CATCH
        PRINT 'Error al registrar el curso: ' + ERROR_MESSAGE();
    END CATCH
END;
GO


CREATE OR ALTER PROCEDURE usp_buscarCurso
    @id_curso INT
AS
BEGIN
    SELECT 
        c.id_curso,
        c.nom_curso,
        c.creditos_curso,
        c.id_carrera,
        ca.nom_carrera
    FROM tb_curso c
    INNER JOIN tb_carrera ca ON c.id_carrera = ca.id_carrera
    WHERE c.id_curso = @id_curso;
END
GO

CREATE OR ALTER PROCEDURE usp_actualizarCurso
    @id_curso       INT,
    @nom_curso      VARCHAR(50),
    @creditos_curso SMALLINT,
    @id_carrera     INT
AS
BEGIN
    BEGIN TRY
        UPDATE tb_curso
        SET 
            nom_curso      = @nom_curso,
            creditos_curso = @creditos_curso,
            id_carrera     = @id_carrera
        WHERE id_curso = @id_curso;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO

--/PRUEBAS DE PROCEDURES MANTENIMIENTO DOCENTE/

exec usp_listarDocentes
go

exec usp_registrarDocentes 'Juan Saenz Velarde', 'Ingenieria de Sistemas', 0
go

exec usp_actualizarDocentes 100, 'Juan Saenz Velarde', 'Ingenieria de Software', 1

--/PRUEBAS DE PROCEDURES DE MANTENIMIENTO CURSO/

exec usp_listarCursos
go
exec usp_listarCursosO
go
exec usp_registrarCurso 'Introducción a la Algoritmia', 4, 1
go
exec usp_buscarCurso 2
go
usp_actualizarCurso 2, 'Matemática Básica', 20,1  
go

--INSERTS

INSERT INTO tb_carrera (nom_carrera) VALUES ('Ingeniería de Software');
INSERT INTO tb_carrera (nom_carrera) VALUES ('Ingeniería Industrial');
INSERT INTO tb_carrera (nom_carrera) VALUES ('Administración de Empresas');
INSERT INTO tb_carrera (nom_carrera) VALUES ('Diseño Gráfico');
INSERT INTO tb_carrera (nom_carrera) VALUES ('Contabilidad');
INSERT INTO tb_carrera (nom_carrera) VALUES ('Ingeniería Electrónica');
INSERT INTO tb_carrera (nom_carrera) VALUES ('Negocios Internacionales');
INSERT INTO tb_carrera (nom_carrera) VALUES ('Psicología');
INSERT INTO tb_carrera (nom_carrera) VALUES ('Arquitectura');
INSERT INTO tb_carrera (nom_carrera) VALUES ('Medicina Humana');

INSERT INTO tb_curso (nom_curso, creditos_curso, id_carrera) VALUES ('Matemática Básica', 4, 1);
INSERT INTO tb_curso (nom_curso, creditos_curso, id_carrera) VALUES ('Física General', 3, 1);
INSERT INTO tb_curso (nom_curso, creditos_curso, id_carrera) VALUES ('Química Orgánica', 4, 2);
INSERT INTO tb_curso (nom_curso, creditos_curso, id_carrera) VALUES ('Programación I', 5, 1);
INSERT INTO tb_curso (nom_curso, creditos_curso, id_carrera) VALUES ('Historia del Perú', 3, 3);
INSERT INTO tb_curso (nom_curso, creditos_curso, id_carrera) VALUES ('Diseño Gráfico', 4, 4);
INSERT INTO tb_curso (nom_curso, creditos_curso, id_carrera) VALUES ('Contabilidad General', 4, 5);
INSERT INTO tb_curso (nom_curso, creditos_curso, id_carrera) VALUES ('Estadística Aplicada', 3, 1);
INSERT INTO tb_curso (nom_curso, creditos_curso, id_carrera) VALUES ('Base de Datos I', 4, 1);
INSERT INTO tb_curso (nom_curso, creditos_curso, id_carrera) VALUES ('Administración I', 3, 5);
INSERT INTO tb_curso (nom_curso, creditos_curso, id_carrera) VALUES ('Programación II', 5, 1);
INSERT INTO tb_curso (nom_curso, creditos_curso, id_carrera) VALUES ('Redes de Computadoras', 4, 1);
INSERT INTO tb_curso (nom_curso, creditos_curso, id_carrera) VALUES ('Microeconomía', 3, 5);
INSERT INTO tb_curso (nom_curso, creditos_curso, id_carrera) VALUES ('Macroeconomía', 3, 5);
INSERT INTO tb_curso (nom_curso, creditos_curso, id_carrera) VALUES ('Ingeniería de Software', 4, 1);
INSERT INTO tb_curso (nom_curso, creditos_curso, id_carrera) VALUES ('Sistemas Operativos', 4, 1);
INSERT INTO tb_curso (nom_curso, creditos_curso, id_carrera) VALUES ('Marketing Digital', 3, 5);
INSERT INTO tb_curso (nom_curso, creditos_curso, id_carrera) VALUES ('Diseño UX/UI', 3, 4);
INSERT INTO tb_curso (nom_curso, creditos_curso, id_carrera) VALUES ('Metodología de la Investigación', 3, 3);
INSERT INTO tb_curso (nom_curso, creditos_curso, id_carrera) VALUES ('Taller de Emprendimiento', 2, 3);


 
